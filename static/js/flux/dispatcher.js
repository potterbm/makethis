MakeThis.flux.Dispatcher = function() {
    this.dispatch_element = $(document);
    this.actions = {};
};


/*
* This is a catalog of all events that are supported by this Dispatcher.
* If a store needs to broadcast an event it should be recorded here.
*/
MakeThis.flux.Dispatcher.prototype.events = {
  "user" : {
    "authentication" : {
      "passed" : "UserAuthenticationPassed",
      "failed" : "UserAuthenticationFailed"
    },
    "deauthentication" : {
      "passed" : "UserLogoutPassed",
      "failed" : "UserLogoutFailed"
    },
    "register" : {
      "success" : "UserRegisterSuccess",
      "error" : "UserRegisterError"
    },
    "change" : "UserChangedEvent"
  },
  "project" : {
    "list" : {
      "change" : "ProjectStore:ListChanged"
    },
    "loaded" : "ProjectStore:ProjectLoaded",
    "create" : {
      "success" : "ProjectStore:ProjectCreated",
      "error" : "ProjectStore:ProjectCreateError"
    },
    "delete" : {
      "success" : "ProjectStore:ProjectDeleted",
      "error" : "ProjectStore:ProjectDeleteError"
    }
  }
};


/*
* Broadcasted events are one-way communication from stores to the frontend
* presentation code.
*/
MakeThis.flux.Dispatcher.prototype.broadcast = function(eventName, eventData) {
  this.dispatch_element.triggerHandler(eventName, eventData);
};


MakeThis.flux.Dispatcher.prototype.on = function(eventName, callback) {
  this.dispatch_element.on(eventName, callback);
};

MakeThis.flux.Dispatcher.prototype.off = function(eventName, callback) {
  this.dispatch_element.off(eventName, callback);
};


/*
* Actions are functionality provided by stores.
*
* They are used to decouple the frontend presentation code from the code that talks
* to the API. They can be called by the presentation code without knowing whether
* a handler exists.
*
* Actions are one-way communication and return no values to the caller. Calling code should
* register for the associated events that will be generated by a state or data
* update in a store that results from an action.
*/
MakeThis.flux.Dispatcher.prototype.action = function(actionType) {
  console.log('action: ', actionType, Array.prototype.slice.call(arguments, 1));
  if(this.actions[actionType]) {
    this.actions[actionType].apply(this, Array.prototype.slice.call(arguments, 1));
  }
};

/*
* This function is used by stores to register actions that can be taken by
* the presentation code.
*/
MakeThis.flux.Dispatcher.prototype.register = function(actionType, callback) {
    this.actions[actionType] = callback;
};


MakeThis.dispatcher = new MakeThis.flux.Dispatcher();
